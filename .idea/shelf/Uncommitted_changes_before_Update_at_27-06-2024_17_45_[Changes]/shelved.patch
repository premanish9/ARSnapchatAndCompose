Index: app/src/main/java/com/example/arsnapchat/DesignActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.arsnapchat\r\n\r\n\r\nimport android.app.Activity\r\nimport android.app.admin.DevicePolicyManager\r\nimport android.content.ComponentName\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.Paint\r\nimport android.graphics.Rect\r\nimport android.graphics.Typeface\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.provider.OpenableColumns\r\nimport android.util.Base64\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.ViewTreeObserver\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.ManagedActivityResultLauncher\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.BoxWithConstraints\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.aspectRatio\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.grid.GridCells\r\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\r\nimport androidx.compose.foundation.lazy.grid.items\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Slider\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.Path\r\nimport androidx.compose.ui.graphics.asImageBitmap\r\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\r\nimport androidx.compose.ui.graphics.nativeCanvas\r\nimport androidx.compose.ui.graphics.painter.Painter\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalView\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextDecoration\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.DpOffset\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport coil.compose.rememberAsyncImagePainter\r\nimport com.example.arsnapchat.model.BarChartData\r\nimport com.example.arsnapchat.model.BottomMenuContent\r\nimport com.example.arsnapchat.model.ChartData\r\nimport com.example.arsnapchat.model.Course\r\nimport com.example.arsnapchat.model.EditorContent\r\nimport com.example.arsnapchat.model.ImageContent\r\nimport com.example.arsnapchat.model.TextContent\r\nimport com.example.arsnapchat.ui.theme.ARSnapchatTheme\r\nimport com.github.skydoves.colorpicker.compose.AlphaSlider\r\nimport com.github.skydoves.colorpicker.compose.AlphaTile\r\nimport com.github.skydoves.colorpicker.compose.BrightnessSlider\r\nimport com.github.skydoves.colorpicker.compose.HsvColorPicker\r\nimport com.github.skydoves.colorpicker.compose.rememberColorPickerController\r\nimport com.google.gson.Gson\r\nimport java.io.ByteArrayOutputStream\r\nimport java.io.File\r\nimport java.io.InputStream\r\nimport java.io.OutputStream\r\nimport kotlin.math.abs\r\n\r\n\r\nclass DesignActivity : ComponentActivity() {\r\n    var intitalfont: String = \"\"\r\n    var mcontext: Context? = null\r\n    /*val RESULT_ENABLE: Int = 1\r\n    var devicePolicyManager: DevicePolicyManager? = null\r\n    var compName: ComponentName? = null*/\r\n    @OptIn(ExperimentalFoundationApi::class)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        mcontext = this\r\n\r\n        /*devicePolicyManager = getSystemService(DEVICE_POLICY_SERVICE) as DevicePolicyManager\r\n        compName = ComponentName(this, MyAdminReceiver::class.java)\r\n\r\n\r\n        if(intitalfont.isEmpty()) {\r\n            intitalfont=\"hello\"\r\n            val intent: Intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN)\r\n            intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, compName)\r\n            intent.putExtra(\r\n                DevicePolicyManager.EXTRA_ADD_EXPLANATION,\r\n                \"Your explanation message here\"\r\n            )\r\n            startActivityForResult(intent, RESULT_ENABLE)\r\n        }*/\r\n\r\n        setContent {\r\n            ARSnapchatTheme {\r\n                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->\r\n                    NotepadDesign(\r\n                        name = \"Android\",\r\n                        modifier = Modifier.padding(innerPadding)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n   /* override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == RESULT_ENABLE && resultCode == RESULT_OK) {\r\n            // Device Admin enabled\r\n        }\r\n    }*/\r\n}\r\n\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun GreetingPreview() {\r\n    ARSnapchatTheme {\r\n        NotepadDesign(\"Android\")\r\n\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun GreetingSection(name: String = \"Geeks\") {\r\n    Row(\r\n        horizontalArrangement = Arrangement.SpaceBetween,\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(15.dp)\r\n    ) {\r\n        Column(verticalArrangement = Arrangement.Center) {\r\n            // heading text view\r\n            Text(text = \"Good morning, $name\", style = MaterialTheme.typography.headlineSmall)\r\n            Text(text = \"We wish you have a good day!\", style = MaterialTheme.typography.bodySmall)\r\n        }\r\n        // search icon\r\n        Icon(\r\n            painter = painterResource(id = R.drawable.baseline_search_24),\r\n            contentDescription = \"Search\",\r\n            tint = Color.White,\r\n            modifier = Modifier.size(24.dp)\r\n        )\r\n    }\r\n}\r\n\r\n// This is how we can create chip seaction at the top of app\r\n\r\n@Composable\r\nfun ChipSection(\r\n    // function with single argument\r\n    chips: List<String>\r\n) {\r\n    var selectedChipIndex by remember {\r\n        // it will not update the string\r\n        // but save and it will helpful for us\r\n        mutableStateOf(0)\r\n    }\r\n    LazyRow {\r\n        items(chips.size) {\r\n            androidx.compose.foundation.layout.Box(contentAlignment = Alignment.Center,\r\n                modifier = Modifier\r\n                    .padding(start = 15.dp, top = 15.dp, bottom = 15.dp)\r\n                    .clickable {\r\n                        selectedChipIndex = it\r\n                    }\r\n                    .clip(RoundedCornerShape(10.dp))\r\n                    .background(\r\n                        // this is basic condition for selected chip index\r\n\r\n                        if (selectedChipIndex == it) Color.Green\r\n                        else Color.Gray\r\n                    )\r\n                    .padding(15.dp)\r\n            ) {\r\n                Text(text = chips[it], color = Color.White)\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// This function is for suggestion secation\r\n@Composable\r\nfun SuggestionSection(color: Color = Color.Blue) {\r\n    Row(\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.SpaceBetween,\r\n        modifier = Modifier\r\n            .padding(15.dp)\r\n            .clip(RoundedCornerShape(10.dp))\r\n            .background(color)\r\n            .padding(horizontal = 15.dp, vertical = 20.dp)\r\n            .fillMaxWidth()\r\n\r\n    ) {\r\n        Column {\r\n            // here are two text views or we can say only text\r\n\r\n            Text(\r\n                text = \"Daily Coding\",\r\n                // it can be litile bit confusing but\r\n                // it is just text style alternate\r\n                // of fontfamily in XML\r\n                style = MaterialTheme.typography.headlineMedium\r\n            )\r\n            Text( // same as above\r\n                text = \"do at least . 3-10 problems / day\",\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = Color.White\r\n            )\r\n\r\n        }\r\n\r\n        androidx.compose.foundation.layout.Box( // box containing icon\r\n            contentAlignment = Alignment.Center, modifier = Modifier\r\n                .size(40.dp)\r\n                .clip(\r\n                    CircleShape\r\n                )\r\n                .background(Color.Green)\r\n                .padding(10.dp)\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(id = R.drawable.baseline_play_circle_24),\r\n                contentDescription = \"Play\",\r\n                tint = Color.White,\r\n                modifier = Modifier.size(16.dp)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\n// this function tells us that\r\n// how menu item should look like\r\nfun BottomMenu(\r\n    items: List<BottomMenuContent>,\r\n    modifier: Modifier = Modifier,\r\n    activeHighlightColor: Color = Color.Green,\r\n    activeTextColor: Color = Color.White,\r\n    inactiveTextColor: Color = Color.White,\r\n    initialSelectedItemIndex: Int = 1\r\n) {\r\n    var selectedItemIndex by remember {\r\n        mutableStateOf(initialSelectedItemIndex)\r\n    }\r\n    Row(\r\n        horizontalArrangement = Arrangement.SpaceAround,\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .background(Color.Blue)\r\n            .padding(15.dp)\r\n    ) {\r\n        // it is basically what we should have\r\n        // for creating an element of BottomMenuItem\r\n        items.forEachIndexed { index, item ->\r\n            BottomMenuItem(\r\n                item = item, isSelected = index == selectedItemIndex,\r\n                activeHighlightColor = activeHighlightColor,\r\n                inactiveTextColor = inactiveTextColor\r\n            ) {\r\n                selectedItemIndex = index\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n// it's basically how menu item should look like\r\n@Composable\r\nfun BottomMenuItem(\r\n    item: BottomMenuContent,\r\n    isSelected: Boolean = false,\r\n    activeHighlightColor: Color = Color.Green,\r\n    activeTextColor: Color = Color.White,\r\n    inactiveTextColor: Color = Color.Blue,\r\n    onItemClick: () -> Unit\r\n) {\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.Center,\r\n        modifier = Modifier.clickable { onItemClick }) {\r\n// here are some peremetens\r\n        // for how elements will align\r\n        androidx.compose.foundation.layout.Box(\r\n            contentAlignment = Alignment.Center,\r\n            modifier = Modifier\r\n                .clip(RoundedCornerShape(10.dp))\r\n                .background(if (isSelected) activeHighlightColor else Color.Transparent)\r\n                .padding(10.dp)\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(id = item.iconId),\r\n                contentDescription = item.title,\r\n                tint = if (isSelected) activeTextColor else inactiveTextColor,\r\n                modifier = Modifier.size(20.dp)\r\n            )\r\n        }\r\n\r\n        Text(\r\n            text = item.title,\r\n            // it's basic condition\r\n            color = if (isSelected) activeTextColor else inactiveTextColor\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n@ExperimentalFoundationApi\r\n@Composable\r\n// here we have just passed the list of courses\r\nfun CourseSection(courses: List<Course>) {\r\n    Column(modifier = Modifier.fillMaxWidth()) {\r\n        Text(\r\n            text = \"courses\",\r\n            style = MaterialTheme.typography.headlineSmall, modifier = Modifier.padding(15.dp)\r\n        )\r\n        // we have used lazyVertically grid\r\n        LazyVerticalGrid(\r\n            columns = GridCells.Fixed(2),\r\n            contentPadding = PaddingValues(start = 7.5.dp, end = 7.5.dp, bottom = 100.dp),\r\n            modifier = Modifier.fillMaxHeight()\r\n        ) {\r\n            items(courses.size) {\r\n                // here we have to define how one of these item is look like\r\n                // we will tell after defining item design\r\n                // let me comment it for now and after\r\n                // creating you just have to remove\r\n\r\n                CourseItem(course = courses[it])\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n@Composable\r\nfun CourseItem(course: Course) {\r\n    BoxWithConstraints( // Box with some attributes\r\n        modifier = Modifier\r\n            .padding(7.5.dp)\r\n            .aspectRatio(1f)\r\n            .clip(RoundedCornerShape(10.dp))\r\n            .background(Color(R.color.colorAccent))\r\n    ) {\r\n        val width = constraints.maxWidth\r\n        val height = constraints.maxHeight\r\n        // setting 5 points for medium\r\n        // color or we can say for another\r\n        // Medium colored path\r\n        val mediumColoredPoint1 = Offset(0f, height * 0.3f)\r\n        val mediumColoredPoint2 = Offset(width * 0.1f, height * 0.35f)\r\n        val mediumColoredPoint3 = Offset(width * 0.4f, height * 0.05f)\r\n        val mediumColoredPoint4 = Offset(width * 0.75f, height * 0.7f)\r\n        val mediumColoredPoint5 = Offset(width * 1.4f, -height.toFloat())\r\n        // joining points to make curves with the help of path class\r\n        // path file that we have created earlier\r\n        // having function that just help to reduce our code\r\n        // and the function is standardQuadFromTo(m1,m2) taking\r\n        // two peramente and connect them\r\n        val mediumColoredPath = Path().apply {\r\n            moveTo(mediumColoredPoint1.x, mediumColoredPoint1.y)\r\n            standardQuadFromTo(mediumColoredPoint1, mediumColoredPoint2)\r\n            standardQuadFromTo(mediumColoredPoint2, mediumColoredPoint3)\r\n            standardQuadFromTo(mediumColoredPoint3, mediumColoredPoint4)\r\n            standardQuadFromTo(mediumColoredPoint4, mediumColoredPoint5)\r\n            lineTo(width.toFloat() + 100f, height.toFloat() + 100f)\r\n            lineTo(-100f, height.toFloat() + 100f)\r\n            close()\r\n        }\r\n\r\n        // it's another part of that\r\n        // texture with light color\r\n        // Light colored path\r\n        val lightPoint1 = Offset(0f, height * 0.35f)\r\n        val lightPoint2 = Offset(width * 0.1f, height * 0.4f)\r\n        val lightPoint3 = Offset(width * 0.3f, height * 0.35f)\r\n        val lightPoint4 = Offset(width * 0.65f, height.toFloat())\r\n        val lightPoint5 = Offset(width * 1.4f, -height.toFloat())\r\n\r\n        val lightColoredPath = Path().apply {\r\n            moveTo(lightPoint1.x, lightPoint1.y)\r\n            standardQuadFromTo(lightPoint1, lightPoint2)\r\n            standardQuadFromTo(lightPoint2, lightPoint3)\r\n            standardQuadFromTo(lightPoint3, lightPoint4)\r\n            standardQuadFromTo(lightPoint4, lightPoint5)\r\n            lineTo(width.toFloat() + 100f, height.toFloat() + 100f)\r\n            lineTo(-100f, height.toFloat() + 100f)\r\n            close()\r\n        }\r\n\r\n// canvas is used when we\r\n        // want to draw something\r\n        androidx.compose.foundation.Canvas(modifier = Modifier.fillMaxSize()) {\r\n            drawPath(// function for drawing paths\r\n                // just pass the path\r\n                path = mediumColoredPath, color = course.mediumColor\r\n            )\r\n            drawPath(// it's for the lighter path\r\n                path = lightColoredPath, color = course.lightColor\r\n            )\r\n        }\r\n\r\n// so , we have done with texture and\r\n        // now just creating box and other things\r\n        // box containing course elements\r\n        androidx.compose.foundation.layout.Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(15.dp)\r\n        ) {\r\n            Text(\r\n                text = course.title,\r\n                style = MaterialTheme.typography.headlineMedium,\r\n                lineHeight = 26.sp,\r\n                modifier = Modifier.align(Alignment.TopStart)\r\n            )\r\n            Icon(\r\n                painter = painterResource(id = course.iconId),\r\n                contentDescription = course.title,\r\n                tint = Color.White,\r\n                modifier = Modifier.align(Alignment.BottomStart)\r\n            )\r\n            Text(\r\n                text = \"Start\",\r\n                color = Color.White,\r\n                fontSize = 14.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                modifier = Modifier\r\n                    .clickable {\r\n                        // Handle the clicks\r\n                    }\r\n                    .align(Alignment.BottomEnd)\r\n                    .clip(\r\n                        RoundedCornerShape(10.dp)\r\n                    )\r\n                    .background(Color.Green)\r\n                    .padding(vertical = 6.dp, horizontal = 15.dp)\r\n            )\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfun Path.standardQuadFromTo(from: Offset, to: Offset) {\r\n    // this function is basically draw\r\n    // a line to our second point and\r\n    // also smooth on that line and make it curve\r\n    quadraticBezierTo(from.x, from.y, abs(from.x + to.x) / 2f, abs(from.y + to.y) / 2f)\r\n}\r\n\r\n@ExperimentalFoundationApi\r\n@Composable\r\nfun Greeting(name: String, modifier: Modifier = Modifier) {\r\n    // HomeSccreen() this is the most outer box that will\r\n    // contain all the views,buttons,chips,etc.\r\n    Box(\r\n        modifier = Modifier\r\n            .background(Color(R.color.Beige2))\r\n            .fillMaxSize()\r\n    ) {\r\n        Column {\r\n            // this is the function for header\r\n            GreetingSection()\r\n            // it's for chipsSecation, and pass\r\n            // as many strings as you want\r\n            ChipSection(\r\n                chips = listOf(\r\n                    \"Data structure\",\r\n                    \"Algorithm\",\r\n                    \"competitive programming\",\r\n                    \"python\"\r\n                )\r\n            )\r\n            // function for suggestionSection\r\n            SuggestionSection()\r\n            // this is for course secation\r\n            CourseSection(\r\n                // function require list of courses and\r\n                // one course contain 5 attributes\r\n                courses = listOf(\r\n                    Course(\r\n                        title = \"greek of the year\",\r\n                        R.drawable.baseline_headphones_24,\r\n                        Color.Blue,\r\n                        Color.DarkGray,\r\n                        Color.LightGray\r\n                    ),\r\n                    Course(\r\n                        title = \"How does AI Works\",\r\n                        R.drawable.baseline_videocam_24,\r\n                        Color.Green,\r\n                        Color.Black,\r\n                        Color.Black\r\n                    ),\r\n                    Course(\r\n                        title = \"Advance python Course\",\r\n                        R.drawable.baseline_play_circle_24,\r\n                        Color(R.color.skyblue1),\r\n                        Color(R.color.skyblue2),\r\n                        Color(R.color.skyblue3)\r\n                    ),\r\n                    Course(\r\n                        title = \"Advance Java Course\",\r\n                        R.drawable.baseline_headphones_24,\r\n                        Color(R.color.Beige1),\r\n                        Color(R.color.Beige2),\r\n                        Color(R.color.Beige3)\r\n                    ),\r\n                    Course(\r\n                        title = \"prepare for aptitude test\",\r\n                        R.drawable.baseline_play_circle_24,\r\n                        Color(R.color.OrangeYellow1),\r\n                        Color(R.color.OrangeYellow2),\r\n                        Color(R.color.OrangeYellow3)\r\n                    ),\r\n                    Course(\r\n                        title = \"How does AI Works\",\r\n                        R.drawable.baseline_videocam_24,\r\n                        Color(R.color.LightGreen1),\r\n                        Color(R.color.LightGreen2),\r\n                        Color(R.color.LightGreen3)\r\n                    ),\r\n\r\n                    )\r\n            )\r\n\r\n\r\n        }\r\n\r\n        // this is the final one that is bottomMenu\r\n        BottomMenu(\r\n            items = listOf(\r\n                // having 5 instances\r\n                BottomMenuContent(\"Home\", R.drawable.baseline_home_24),\r\n                BottomMenuContent(\"explore\", R.drawable.baseline_explore_24),\r\n                BottomMenuContent(\"dark mode\", R.drawable.baseline_shield_moon_24),\r\n                BottomMenuContent(\"videos\", R.drawable.baseline_videocam_24),\r\n                BottomMenuContent(\"Profile\", R.drawable.baseline_self_improvement_24),\r\n            ), modifier = Modifier.align(Alignment.BottomCenter)\r\n        )\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\n@ExperimentalFoundationApi\r\nfun NotepadDesign(name: String, modifier: Modifier = Modifier) {\r\n\r\n    // HomeSccreen() this is the most outer box that will\r\n    // contain all the views,buttons,chips,etc.\r\n    Box(\r\n        modifier = Modifier\r\n            .background(Color.White)\r\n            .fillMaxSize()\r\n    ) {\r\n        Column {\r\n            // this is the function for header\r\n            RequestPermissions()\r\n            ToolbarSection()\r\n            // it's for chipsSecation, and pass\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfun findFirstTextIndex(contents: List<Content>): Int? {\r\n    return contents.indexOfFirst { it is Content.Text }.takeIf { it != -1 }\r\n}\r\n\r\n\r\nfun replaceTextAtIndex(contents: List<Content>, index: Int?, newText: String): List<Content> {\r\n    /*val mutableList = contents.toMutableList()\r\n    mutableList[index!!] = Content.Text(newText)\r\n    val updatedList: List<Content> = mutableList.toList()\r\n    println(updatedList)*/\r\n    return contents.mapIndexed { i, content ->\r\n        if (i == index && content is Content.Text) {\r\n            content.copy(text = newText)\r\n        } else {\r\n            content\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfun saveImageToGallery(context: Context, bitmap: Bitmap, displayName: String): Uri? {\r\n    val resolver = context.contentResolver\r\n    val contentValues = ContentValues().apply {\r\n        put(MediaStore.MediaColumns.DISPLAY_NAME, displayName)\r\n        put(MediaStore.MediaColumns.MIME_TYPE, \"image/jpeg\")\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            put(MediaStore.MediaColumns.RELATIVE_PATH, \"Pictures/MyAppImages\")\r\n        }\r\n    }\r\n\r\n    val imageUri: Uri? = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)\r\n    imageUri?.let {\r\n        val outputStream: OutputStream? = resolver.openOutputStream(it)\r\n        outputStream?.use { stream ->\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream)\r\n        }\r\n    }\r\n    return imageUri\r\n}\r\n\r\nfun loadImageFromUri(context: Context, uri: Uri): Bitmap? {\r\n    val inputStream = context.contentResolver.openInputStream(uri)\r\n    return BitmapFactory.decodeStream(inputStream)\r\n}\r\n\r\n@Composable\r\nfun ToolbarSection() {\r\n\r\n    var selectedColor by remember { mutableStateOf(Color.Black) }\r\n    var selectedBackgroundColor by remember { mutableStateOf(Color.White) }\r\n    var selectedFontSize by remember { mutableStateOf(10.sp) }\r\n    var isBold by remember { mutableStateOf(false) }\r\n    var isItalic by remember { mutableStateOf(false) }\r\n    var isUnderLine by remember { mutableStateOf(false) }\r\n\r\n    var selectedColorPickerfor by remember {\r\n        mutableStateOf(3)\r\n    }\r\n    var selectedFont by remember { mutableStateOf(\"Cantataone\") }\r\n    var showColorPicker by remember { mutableStateOf(false) } // State to toggle between views\r\n    var isbgImagePicker by remember { mutableStateOf(false) }\r\n    var setBgImage by remember { mutableStateOf(false) }\r\n    var selectedImageUri by remember { mutableStateOf<Uri?>(null) }\r\n    var selectedBgUri by remember { mutableStateOf<Uri?>(null) }\r\n    var onImageSelectURL by remember {\r\n        mutableStateOf(0)\r\n    }\r\n    var contents by remember { mutableStateOf(listOf<Content>()) }\r\n    val indexii = findFirstTextIndex(contents)\r\n    if(indexii==null) {\r\n        contents = contents + Content.Text(\"Type here !!\")\r\n    }\r\n    var barChartData by remember { mutableStateOf<BarChartData?>(null) }\r\n\r\n\r\n    var shouldShowDialog by remember { mutableStateOf(false) }\r\n    val imageList = listOf(R.drawable.blue, R.drawable.brown, R.drawable.gold, R.drawable.yellow)\r\n\r\n    Log.i(\"DesignActivity\", \"ToolbarSection initialised\")\r\n    val imagePickerLauncher = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.GetContent(),\r\n        onResult = { uri: Uri? ->\r\n            if (uri != null) {\r\n                selectedImageUri = uri\r\n                if (!isbgImagePicker) {\r\n                    contents = contents + Content.Image(uri)\r\n                    // setBgImage=false\r\n                } else {\r\n                    selectedBgUri = uri\r\n                    setBgImage = true\r\n                    isbgImagePicker = false\r\n                }\r\n            }\r\n            Log.i(\"DesignActivity\", \"selectedImageUri $selectedImageUri $uri\")\r\n        }\r\n    )\r\n\r\n    val context = LocalContext.current\r\n    val filePickerLauncher = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.OpenDocument(),\r\n        onResult = { uri: Uri? ->\r\n            uri?.let {\r\n                val mimeType = context.contentResolver.getType(it)\r\n                when {\r\n                    mimeType?.startsWith(\"audio/\") == true -> contents =\r\n                        contents + Content.Audio(it)\r\n\r\n                    mimeType?.startsWith(\"video/\") == true -> contents =\r\n                        contents + Content.Video(it)\r\n                }\r\n            }\r\n        }\r\n    )\r\n\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .background(Color(R.color.notepadtool))\r\n            .padding(top = 50.dp) // Colorful padding area\r\n    ) {\r\n        Row(\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(top = 5.dp, bottom = 10.dp)\r\n        ) {\r\n            Text(\r\n                text = \"Wordpad\",\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = Color.White,\r\n                modifier = Modifier.padding(end = 40.dp, start = 20.dp)\r\n            )\r\n\r\n            // this is the final one that is bottomMenu\r\n            BottomMenuColumn(\r\n                items = listOf(\r\n                    // having 5 instances\r\n                    BottomMenuContent(\"Home\", R.drawable.baseline_format_color_text_24),\r\n                    BottomMenuContent(\"explore\", R.drawable.baseline_add_24),\r\n                    BottomMenuContent(\"dark mode\", R.drawable.baseline_store_24),\r\n                    BottomMenuContent(\"videos\", R.drawable.baseline_save_24),\r\n                    BottomMenuContent(\"Profile\", R.drawable.baseline_print_24),\r\n                    BottomMenuContent(\"Profile\", R.drawable.baseline_more_vert_24),\r\n                ),\r\n                modifier = Modifier.align(Alignment.CenterVertically),\r\n                onFontChange = { selectedFont = it },\r\n                onColorPickerFor = { selectedColorPickerfor = it },\r\n                onShowBackImageDialog = { shouldShowDialog = it },\r\n                onShowColorPicker = { showColorPicker = it },\r\n                imagePickerLauncher = imagePickerLauncher,\r\n                filePickerLauncher = filePickerLauncher,\r\n                barChartData = barChartData,\r\n                contents = contents,\r\n                selectedFontcolor = selectedColor,\r\n                selectedFontFamily = selectedFont,\r\n                selectedFontSize = selectedFontSize.value,\r\n                isBold = isBold,\r\n                isItalic = isItalic,\r\n                isUnderline = isUnderLine,\r\n\r\n                onBarChartDataChange = { barChartData = it },\r\n                onTextChange = {\r\n                    val index = findFirstTextIndex(contents)\r\n                    // contents=contents+Content.Text(it)\r\n                    if (index == null) {\r\n                        contents = contents + Content.Text(it)\r\n                    } else {\r\n                        contents = replaceTextAtIndex(contents, index, it)\r\n                    }\r\n                },\r\n                onImageChange={contents = contents + Content.Image(it)},\r\n                onVideoChange ={contents = contents + Content.Video(it)},\r\n                onAudioChange={contents = contents + Content.Audio(it)},\r\n                onFontColorChange = { selectedColor = it },\r\n                onFontSizeChange = { selectedFontSize = it.sp },\r\n                onBoldChange = { isBold = it },\r\n                onItalicChange = { isItalic = it },\r\n                onUnderLineChange = {isUnderLine=it},\r\n                onImageSelectURL = { onImageSelectURL = it },\r\n                selectedImageURL = onImageSelectURL,\r\n                selectedImageURI = selectedBgUri,\r\n                onImageSelectedURI = { selectedBgUri = it },\r\n                onSetBgImage = { setBgImage = it }\r\n\r\n            )\r\n\r\n        }\r\n\r\n        if (showColorPicker) {\r\n            if (selectedColorPickerfor == 0) {\r\n                colorPicker(\r\n                    onColorChange = { selectedColor = it },\r\n                    onShowColorPicker = { showColorPicker = it })\r\n            } else {\r\n                colorPicker(\r\n                    onColorChange = { selectedBackgroundColor = it },\r\n                    onShowColorPicker = { showColorPicker = it })\r\n            }\r\n        } else {\r\n            //  EditorScreen(selectedColor,selectedFont)\r\n\r\n            EditorScreen(\r\n                selectedColor,\r\n                selectedFont,\r\n                selectedFontSize,\r\n                isBold,\r\n                isItalic,\r\n                isUnderLine,\r\n                selectedBackgroundColor,\r\n                contents,\r\n                onFontSizeChange = { selectedFontSize = it.sp },\r\n                onBoldChange = { isBold = it },\r\n                onItalicChange = { isItalic = it },\r\n                onUnderLineChange = {isUnderLine=it},\r\n                onTextChange = {\r\n                    val index = findFirstTextIndex(contents)\r\n                    // contents=contents+Content.Text(it)\r\n                    if (index == null) {\r\n                        contents = contents + Content.Text(it)\r\n                    } else {\r\n                        contents = replaceTextAtIndex(contents, index, it)\r\n                    }\r\n                },\r\n                onImageSelectURL = { onImageSelectURL = it },\r\n                selectedImageURL = onImageSelectURL,\r\n                shouldShowDialog,\r\n                onShowBackImageDialog = { shouldShowDialog = it },\r\n                openImagePicker = {\r\n                    isbgImagePicker = true\r\n                    imagePickerLauncher.launch(\"image/*\")\r\n                },\r\n                imageList,\r\n                barChartData = barChartData,\r\n                selectedBgUri,\r\n                setBgImage,\r\n                onSetBgImage = { setBgImage = it }\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n@Composable\r\nfun RequestPermissions() {\r\n    val context = LocalContext.current\r\n    val activity = context as Activity\r\n    val permissions = listOf(\r\n        android.Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n        android.Manifest.permission.READ_EXTERNAL_STORAGE,\r\n        android.Manifest.permission.READ_MEDIA_IMAGES,\r\n        android.Manifest.permission.CAMERA\r\n    )\r\n\r\n    val permissionLauncher = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.RequestMultiplePermissions()\r\n    ) { permissionsMap ->\r\n        val allPermissionsGranted = permissionsMap.entries.all { it.value }\r\n        if (!allPermissionsGranted) {\r\n            // Handle the case where some permissions are not granted\r\n            Toast.makeText(\r\n                context,\r\n                \"Permissions are required for this app to function\",\r\n                Toast.LENGTH_LONG\r\n            ).show()\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        permissionLauncher.launch(permissions.toTypedArray())\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun colorPicker(onColorChange: (Color) -> Unit, onShowColorPicker: (Boolean) -> Unit) {\r\n    // on below line we are creating a variable for controller\r\n    val controller = rememberColorPickerController()\r\n\r\n    // on below line we are creating a column,\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(top = 250.dp, start = 30.dp, end = 30.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.Center,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            AlphaTile(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(60.dp)\r\n                    .clip(RoundedCornerShape(6.dp)), controller = controller\r\n            )\r\n        }\r\n\r\n        HsvColorPicker(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(350.dp)\r\n            .padding(10.dp),\r\n            controller = controller,\r\n            onColorChanged = { colorEnvelope -> onColorChange(colorEnvelope.color) })\r\n\r\n        AlphaSlider(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(10.dp)\r\n                .height(35.dp),\r\n            controller = controller,\r\n            tileOddColor = Color.White,\r\n            tileEvenColor = Color.Black\r\n        )\r\n\r\n        BrightnessSlider(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(10.dp)\r\n                .height(35.dp), controller = controller\r\n        )\r\n\r\n\r\n        Spacer(modifier = Modifier.height(28.dp))\r\n\r\n        Button(onClick = {\r\n            onShowColorPicker(false)\r\n        }) {\r\n            Text(\"Apply and Return\")\r\n        }\r\n    }\r\n}\r\n\r\n\r\nsealed class Content {\r\n    data class Text(val text: String) : Content()\r\n    data class Image(val uri: Uri) : Content()\r\n    data class Audio(val uri: Uri) : Content()\r\n    data class Video(val uri: Uri) : Content()\r\n}\r\n\r\n\r\nfun saveToSharedPreferences(context: Context, key: String, content: String) {\r\n    val sharedPreferences: SharedPreferences =\r\n        context.getSharedPreferences(\"EditorPrefs\", Context.MODE_PRIVATE)\r\n    val editor = sharedPreferences.edit()\r\n    editor.putString(key, content)\r\n    editor.apply()\r\n}\r\n\r\n\r\nfun loadFromSharedPreferences(context: Context, key: String): String? {\r\n    val sharedPreferences: SharedPreferences =\r\n        context.getSharedPreferences(\"EditorPrefs\", Context.MODE_PRIVATE)\r\n    return sharedPreferences.getString(key, null)\r\n}\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun EditorScreen(\r\n    selectedColor: Color,\r\n    selectedFont: String,\r\n    selectedFontSize: TextUnit,\r\n    isBold: Boolean,\r\n    isItalic: Boolean,\r\n    isUnderline: Boolean,\r\n    selectedBackgroundColor: Color,\r\n    contents: List<Content>,\r\n    onFontSizeChange: (Float) -> Unit,\r\n    onBoldChange: (Boolean) -> Unit,\r\n    onItalicChange: (Boolean) -> Unit,\r\n    onUnderLineChange: (Boolean) -> Unit,\r\n    onTextChange: (String) -> Unit,\r\n    onImageSelectURL: (Int) -> Unit,\r\n    selectedImageURL: Int,\r\n    shouldShowDialog: Boolean,\r\n    onShowBackImageDialog: (Boolean) -> Unit,\r\n    openImagePicker: (Boolean) -> Unit,\r\n    imageList: List<Int>,\r\n    barChartData: BarChartData? = null,\r\n    selectedImageUri: Uri?,\r\n    setBgImage: Boolean,\r\n    onSetBgImage: (Boolean) -> Unit\r\n) {\r\n\r\n\r\n\r\n    val isKeyboardVisible = remember { mutableStateOf(false) }\r\n    Log.d(\"isKeyboardVisibleU\", isKeyboardVisible.toString())\r\n\r\n    KeyboardVisibilityDetector(onKeyboardVisibilityChanged = { isVisible ->\r\n        isKeyboardVisible.value = isVisible\r\n    })\r\n\r\n\r\n\r\n    val fontInt = getFontListFromAssets().get(selectedFont)\r\n\r\n    var backgroundcolor = selectedBackgroundColor\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(top = 50.dp, start = 0.dp, end = 0.dp, bottom = 0.dp)\r\n        // Ensure the entire Box is scrollable\r\n    ) {\r\n\r\n\r\n        // Background image\r\n        if (selectedImageURL == 2) {\r\n\r\n\r\n            openImagePicker(true)\r\n            onImageSelectURL(3)\r\n\r\n\r\n        } else if (selectedImageURL == 3) {\r\n            // onSetBgImage(true)\r\n\r\n\r\n            if (setBgImage) {\r\n                backgroundcolor = Color.Transparent\r\n                val context = LocalContext.current\r\n               // val bitmap= selectedImageUri?.let { loadBitmapFromUri(context =context , it) }\r\n                var bitmap= base64ToBitmap(selectedImageUri.toString())\r\n                Log.i(\"DesignActivity\", \"setBgImage $bitmap\")\r\n                if (bitmap != null) {\r\n                    Image(\r\n                        bitmap = bitmap.asImageBitmap(),\r\n                        contentDescription = null,\r\n                        contentScale = ContentScale.Crop, // Scale the image to fill the Box\r\n                        modifier = Modifier.fillMaxSize()\r\n                    )\r\n                }else{\r\n                     bitmap= selectedImageUri?.let { loadBitmapFromUri(context =context , it) }\r\n                    Log.i(\"DesignActivity\", \"setBgImage after null $bitmap\")\r\n                    if (bitmap != null) {\r\n                        Image(\r\n                            bitmap = bitmap.asImageBitmap(),\r\n                            contentDescription = null,\r\n                            contentScale = ContentScale.Crop, // Scale the image to fill the Box\r\n                            modifier = Modifier.fillMaxSize()\r\n                        )\r\n                    }\r\n                }\r\n                //  onImageSelectURL=0\r\n            }\r\n\r\n        } else if (selectedImageURL > 1) {\r\n            Log.i(\"DesignActivity\", \"ImageListAlertDialog $selectedImageURL\")\r\n            backgroundcolor = Color.Transparent\r\n            Image(\r\n                painter = painterResource(id = selectedImageURL),\r\n                contentDescription = null,\r\n                contentScale = ContentScale.Crop, // Scale the image to fill the Box\r\n//            contentScale = ContentScale.Crop, // Scale the image to fill the Box\r\n                modifier = Modifier.fillMaxSize()\r\n            )\r\n        } else {\r\n            backgroundcolor = selectedBackgroundColor\r\n        }\r\n\r\n\r\n        ImageListAlertDialog(\r\n            shouldShowDialog,\r\n            onDismiss = { onShowBackImageDialog(false) },\r\n            onImageSelectedUrl = { onImageSelectURL(it) },\r\n            pickfromGallery = { onSetBgImage(it) },\r\n            imageList\r\n        )\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(backgroundcolor)\r\n            //verticalScroll(scrollState)\r\n        ) {\r\n\r\n            var isdata = false\r\n\r\n            Slider(\r\n                value = selectedFontSize.value,\r\n                onValueChange = { onFontSizeChange(it) },\r\n                valueRange = 10f..30f,\r\n                modifier = Modifier.padding(vertical = 8.dp)\r\n            )\r\n            Column(modifier = Modifier.fillMaxSize()) {\r\n                // Display text contents in a Column\r\n\r\n\r\n                // Display image contents in a LazyVerticalGrid\r\n                 LazyVerticalGrid(\r\n                     columns = GridCells.Adaptive(minSize = 100.dp),\r\n                     modifier = Modifier.fillMaxWidth()\r\n                 ) {\r\n                     items(contents.filterIsInstance<Content.Image>()) { content ->\r\n                          val context = LocalContext.current\r\n                         // val bitmap= selectedImageUri?.let { loadBitmapFromUri(context =context , it) }\r\n                         var bitmap= base64ToBitmap(content.uri.toString())\r\n                        // Log.i(\"DesignActivity\", \"setlistImage $bitmap\")\r\n                         if (bitmap != null) {\r\n                             Image(\r\n                                 bitmap = bitmap!!.asImageBitmap(),\r\n                                 contentDescription = null,\r\n                                 contentScale = ContentScale.Crop, // Scale the image to fill the Box\r\n                                 modifier = Modifier\r\n                                     .fillMaxWidth()\r\n                                     .height(200.dp)\r\n                                     .padding(2.dp)\r\n                             )\r\n                         }else{\r\n                             bitmap= content.uri?.let { loadBitmapFromUri(context =context , it) }\r\n                            // Log.i(\"DesignActivity\", \"setBgImage after null $bitmap\")\r\n                             if (bitmap != null) {\r\n                                 Image(\r\n                                     bitmap = bitmap!!.asImageBitmap(),\r\n                                     contentDescription = null,\r\n                                     contentScale = ContentScale.Crop, // Scale the image to fill the Box\r\n                                     modifier = Modifier\r\n                                         .fillMaxWidth()\r\n                                         .height(200.dp)\r\n                                         .padding(2.dp)\r\n                                 )\r\n                             }\r\n                         }\r\n\r\n                     }\r\n\r\n\r\n                     items(contents.filterIsInstance<Content.Audio>()) { content ->\r\n                         Column(\r\n                             horizontalAlignment = Alignment.CenterHorizontally,\r\n                             modifier = Modifier\r\n                                 .fillMaxWidth()\r\n                                 .padding(bottom = 8.dp)\r\n                         ) {\r\n                             Image(\r\n                                 painter = painterResource(id = R.drawable.music_file),\r\n                                 contentDescription = \"Audio\",\r\n                                 modifier = Modifier\r\n                                     .size(100.dp)\r\n                                     .padding(bottom = 4.dp)\r\n                             )\r\n                             val context = LocalContext.current\r\n                             Text(\r\n                                 text = getFileNameFromUri(context, content.uri),\r\n                                 textAlign = TextAlign.Center,\r\n                                 style = TextStyle(fontSize = 14.sp)\r\n                             )\r\n                         }\r\n                     }\r\n\r\n\r\n                     items(contents.filterIsInstance<Content.Video>()) { content ->\r\n                         Column(\r\n                             horizontalAlignment = Alignment.CenterHorizontally,\r\n                             modifier = Modifier\r\n                                 .fillMaxWidth()\r\n                                 .padding(bottom = 8.dp)\r\n                         ) {\r\n                             Image(\r\n                                 painter = painterResource(id = R.drawable.video_file),\r\n                                 contentDescription = \"Video\",\r\n                                 modifier = Modifier\r\n                                     .fillMaxWidth()\r\n                                     .height(100.dp)\r\n                                     .padding(bottom = 4.dp)\r\n                             )\r\n                             val context = LocalContext.current\r\n\r\n                                 Text(\r\n                                     text = getFileNameFromUri(context, content.uri),\r\n                                     textAlign = TextAlign.Center,\r\n                                     style = TextStyle(fontSize = 14.sp)\r\n                                 )\r\n\r\n                         }\r\n                     }\r\n\r\n\r\n\r\n\r\n                 }\r\n                // Display image, audio, and video contents in a LazyVerticalGrid\r\n                /*LazyVerticalGrid(\r\n                    columns = GridCells.Adaptive(minSize = 100.dp),\r\n                    modifier = Modifier.fillMaxWidth()\r\n                ) {\r\n                    items(contents) { content ->\r\n                        when (content) {\r\n                            is Content.Image -> {\r\n                                Log.i(\"DesignActivity\",\"LazyVerticalGrid 1\")\r\n                                Image(\r\n                                    painter = rememberAsyncImagePainter(model = content.uri),\r\n                                    contentDescription = null,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .height(200.dp)\r\n                                        .padding(bottom = 8.dp)\r\n                                )\r\n                            }\r\n\r\n                            is Content.Audio -> {\r\n                                Column(\r\n                                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .padding(bottom = 8.dp)\r\n                                ) {\r\n                                    Image(\r\n                                        painter = painterResource(id = R.drawable.music_file),\r\n                                        contentDescription = \"Audio\",\r\n                                        modifier = Modifier\r\n                                            .size(100.dp)\r\n                                            .padding(bottom = 4.dp)\r\n                                    )\r\n                                    val context = LocalContext.current\r\n                                    Text(\r\n                                        text = getFileNameFromUri(context, content.uri),\r\n                                        textAlign = TextAlign.Center,\r\n                                        style = TextStyle(fontSize = 14.sp)\r\n                                    )\r\n                                }\r\n                            }\r\n\r\n                            is Content.Video -> {\r\n                                Column(\r\n                                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .padding(bottom = 8.dp)\r\n                                ) {\r\n                                    Image(\r\n                                        painter = painterResource(id = R.drawable.video_file),\r\n                                        contentDescription = \"Video\",\r\n                                        modifier = Modifier\r\n                                            .fillMaxWidth()\r\n                                            .height(100.dp)\r\n                                            .padding(bottom = 4.dp)\r\n                                    )\r\n                                    val context = LocalContext.current\r\n                                    Text(\r\n                                        text = getFileNameFromUri(context, content.uri),\r\n                                        textAlign = TextAlign.Center,\r\n                                        style = TextStyle(fontSize = 14.sp)\r\n                                    )\r\n                                }\r\n                            }\r\n\r\n                            else -> {}\r\n                        }\r\n                    }\r\n                }*/\r\n\r\n                //display bar-chart\r\n                barChartData?.let { data ->\r\n                    Log.d(\"Barchartdatwa\", \"$data ---dataPoints\")\r\n                    BarChart(data.labels, data.dataPoints)\r\n                }\r\n                if (isKeyboardVisible.value) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .background(Color.LightGray)\r\n                    ) {\r\n                        IconButton(\r\n                            onClick = { onBoldChange(!isBold) },\r\n                            modifier = Modifier.background(if (isBold) Color.DarkGray else Color.Transparent)\r\n                        ) {\r\n                            Icon(\r\n                                painterResource(id = R.drawable.baseline_format_bold_24),\r\n                                contentDescription = \"Bold\"\r\n                            )\r\n                        }\r\n                        IconButton(\r\n                            onClick = { onItalicChange(!isItalic) },\r\n                            modifier = Modifier.background(if (isItalic) Color.DarkGray else Color.Transparent)\r\n                        ) {\r\n                            Icon(\r\n                                painterResource(id = R.drawable.baseline_format_italic_24),\r\n                                contentDescription = \"Italic\"\r\n                            )\r\n                        }\r\n                        IconButton(\r\n                            onClick = { onUnderLineChange(!isUnderline) },\r\n                            modifier = Modifier.background(if (isUnderline) Color.DarkGray else Color.Transparent)\r\n                        ) {\r\n                            Icon(\r\n                                painterResource(id = R.drawable.baseline_format_underlined_24),\r\n                                contentDescription = \"Underline\"\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                contents.filterIsInstance<Content.Text>().forEach { content ->\r\n                    isdata = true\r\n                    // textInput=content.text\r\n                    TextField(\r\n                        value = content.text,\r\n                        onValueChange = {\r\n                          //  textInput = it\r\n                            onTextChange(it)\r\n                        },\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .fillMaxHeight()\r\n                            .border(0.5.dp, Color.White),\r\n                        colors = TextFieldDefaults.textFieldColors(\r\n                            containerColor = backgroundcolor, // Change background color to white\r\n                            cursorColor = Color.Black // Change cursor color to black (optional)\r\n                        ),\r\n                        textStyle = TextStyle(\r\n                            fontSize = selectedFontSize,\r\n                            fontWeight = if (isBold) FontWeight.Bold else FontWeight.Normal,\r\n                            fontStyle = if (isItalic) FontStyle.Italic else FontStyle.Normal,\r\n                            textDecoration = if (isUnderline) TextDecoration.Underline else TextDecoration.None,\r\n                            color = selectedColor,\r\n                            fontFamily = FontFamily(\r\n                                Font(fontInt!!, FontWeight.Normal)\r\n                            )\r\n                        )\r\n                    )\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfun getBitmapFromUri(context: Context,uri: Uri):Bitmap? {\r\n\r\n        val contentResolver = context.contentResolver\r\n        var inputStream: InputStream? = null\r\n        var bitmap: Bitmap? = null\r\n\r\n        try {\r\n            inputStream = contentResolver.openInputStream(uri)\r\n            bitmap = BitmapFactory.decodeStream(inputStream)\r\n        } catch (e: Exception) {\r\n            // Handle exceptions, e.g., file not found\r\n            e.printStackTrace()\r\n        } finally {\r\n            inputStream?.close()\r\n        }\r\n\r\n        return bitmap\r\n\r\n}\r\n\r\n\r\nfun bitmapToBase64(bitmap: Bitmap): String {\r\n    val byteArrayOutputStream = ByteArrayOutputStream()\r\n    bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)\r\n    val byteArray = byteArrayOutputStream.toByteArray()\r\n    return Base64.encodeToString(byteArray, Base64.DEFAULT)\r\n}\r\n\r\n\r\nfun base64ToBitmap(base64String: String): Bitmap? {\r\n    val byteArray = Base64.decode(base64String, Base64.DEFAULT)\r\n    return BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)\r\n}\r\n\r\n@Composable\r\nfun KeyboardVisibilityDetector(\r\n    onKeyboardVisibilityChanged: (Boolean) -> Unit\r\n) {\r\n    val view = LocalView.current\r\n    val isKeyboardVisible = remember { mutableStateOf(false) }\r\n\r\n    DisposableEffect(view) {\r\n        val listener = ViewTreeObserver.OnGlobalLayoutListener {\r\n            val rect = Rect()\r\n            view.getWindowVisibleDisplayFrame(rect)\r\n            val screenHeight = view.height\r\n            val keypadHeight = screenHeight - rect.bottom\r\n            val isKeyboardNowVisible = keypadHeight > screenHeight * 0.15\r\n            if (isKeyboardNowVisible != isKeyboardVisible.value) {\r\n                isKeyboardVisible.value = isKeyboardNowVisible\r\n                onKeyboardVisibilityChanged(isKeyboardNowVisible)\r\n            }\r\n        }\r\n        view.viewTreeObserver.addOnGlobalLayoutListener(listener)\r\n        onDispose {\r\n            view.viewTreeObserver.removeOnGlobalLayoutListener(listener)\r\n        }\r\n    }\r\n}\r\n\r\nfun getFileNameFromUri(context: Context, uri: Uri): String {\r\n    var fileName=uri.toString()\r\n    try{\r\n        val cursor = context.contentResolver.query(uri, null, null, null, null)\r\n        val nameIndex = cursor?.getColumnIndex(OpenableColumns.DISPLAY_NAME)\r\n        cursor?.moveToFirst()\r\n         fileName = cursor?.getString(nameIndex ?: 0) ?: \"\"\r\n        cursor?.close()\r\n    }catch (e:Exception){\r\n        e.printStackTrace()\r\n        if (fileName.contains(\"video\")) {\r\n            fileName = extractTextAfterVideo(fileName, \"/video\")\r\n        }else {\r\n            fileName = extractTextAfterVideo(fileName, \"/audio\")\r\n        }\r\n    }\r\n\r\n    return fileName\r\n}\r\n\r\n\r\nfun extractTextAfterVideo(uri: String,from:String): String {\r\n    return uri.substringAfter(from)\r\n}\r\n\r\n\r\nfun loadBitmapFromUri(context: Context, uri: Uri): Bitmap? {\r\n    return try {\r\n        val inputStream = context.contentResolver.openInputStream(uri)\r\n        BitmapFactory.decodeStream(inputStream)\r\n    } catch (e: Exception) {\r\n        e.printStackTrace()\r\n        null\r\n    }\r\n}\r\n\r\nfun getFontFromAssetsByName(context: Context, fontName: String): FontFamily {\r\n    val typeface = Typeface.createFromAsset(context.assets, \"fonts/$fontName\")\r\n    return FontFamily(typeface)\r\n}\r\n\r\n@Composable\r\nfun LoadImageFromStorage(filePath: String): Painter {\r\n    val imagePainter = rememberAsyncImagePainter(model = File(filePath))\r\n    return imagePainter\r\n}\r\n\r\n@Composable\r\nfun BottomMenuColumn(\r\n    items: List<BottomMenuContent>,\r\n    modifier: Modifier = Modifier,\r\n    onFontChange: (String) -> Unit,\r\n    onColorPickerFor: (Int) -> Unit,\r\n    onShowBackImageDialog: (Boolean) -> Unit,\r\n    onShowColorPicker: (Boolean) -> Unit,\r\n    imagePickerLauncher: ManagedActivityResultLauncher<String, Uri?>,\r\n    filePickerLauncher: ManagedActivityResultLauncher<Array<String>, Uri?>,\r\n    activeHighlightColor: Color = Color.Green,\r\n    activeTextColor: Color = Color.White,\r\n    inactiveTextColor: Color = Color.White,\r\n    initialSelectedItemIndex: Int = 0,\r\n    barChartData: BarChartData? = null,\r\n    contents: List<Content>,\r\n    selectedFontcolor: Color,\r\n    selectedFontFamily: String,\r\n    selectedFontSize: Float,\r\n    isBold: Boolean,\r\n    isItalic: Boolean,\r\n    isUnderline: Boolean,\r\n    onBarChartDataChange: (BarChartData) -> Unit,\r\n    onTextChange: (String) -> Unit,\r\n    onImageChange:(Uri)->Unit,\r\n    onVideoChange:(Uri)->Unit,\r\n    onAudioChange:(Uri)->Unit,\r\n    onFontColorChange: (Color) -> Unit,\r\n    onFontSizeChange: (Float) -> Unit,\r\n    onBoldChange: (Boolean) -> Unit,\r\n    onItalicChange: (Boolean) -> Unit,\r\n    onUnderLineChange: (Boolean) -> Unit,\r\n    onImageSelectURL: (Int) -> Unit,\r\n    selectedImageURL: Int,\r\n    selectedImageURI: Uri?,\r\n    onImageSelectedURI: (Uri?) -> Unit,\r\n    onSetBgImage: (Boolean) -> Unit\r\n\r\n) {\r\n    var selectedItemIndex by remember {\r\n        mutableStateOf(initialSelectedItemIndex)\r\n    }\r\n    val context = LocalContext.current\r\n    var expanded by remember {\r\n        mutableStateOf(false)\r\n    }\r\n    var showDialog by remember { mutableStateOf(false) }\r\n    Row(\r\n        horizontalArrangement = Arrangement.SpaceAround,\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .padding(5.dp)\r\n    ) {\r\n        // it is basically what we should have\r\n        // for creating an element of BottomMenuItem\r\n        items.forEachIndexed { index, item ->\r\n            BottomMenuItemNotepad(\r\n                item = item, isSelected = index == selectedItemIndex,\r\n                activeHighlightColor = activeHighlightColor,\r\n                selectedItemIndex = selectedItemIndex,\r\n                inactiveTextColor = inactiveTextColor\r\n            ) {\r\n                selectedItemIndex = index\r\n                expanded =\r\n                    selectedItemIndex == 0 || selectedItemIndex == 1 || selectedItemIndex == 5 || selectedItemIndex == 3\r\n\r\n                if (selectedItemIndex == 2)\r\n                    onShowColorPicker(false)\r\n                Log.i(\"DEsignActivity\", \"index\" + index + selectedItemIndex)\r\n                if (item.title.equals(\"Bar Chart\")) {\r\n                    showDialog = true\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    val dropdownOffset = 100.dp\r\n\r\n    DropdownMenu(\r\n        expanded = expanded,\r\n        onDismissRequest = { expanded = false },\r\n        offset = if (selectedItemIndex == 1) DpOffset(dropdownOffset, 5.dp)\r\n        else DpOffset(\r\n            dropdownOffset + (selectedItemIndex * 50).dp,\r\n            5.dp\r\n        ) // Adjust the offset for above position\r\n\r\n        ,\r\n        properties = PopupProperties(dismissOnClickOutside = false)\r\n    ) {\r\n        Log.i(\"DesignActivity\", \"DropdownMenu $selectedItemIndex\")\r\n\r\n        /* if (selectedItemIndex != 5) {\r\n             onShowColorPicker(false)\r\n         }*/\r\n\r\n        val fontList = getFontListFromAssets()\r\n        val listFont = ArrayList<BottomMenuContent>()\r\n\r\n        fontList.forEach { fontName ->\r\n            listFont.add(BottomMenuContent(fontName.key, fontName.value))\r\n        }\r\n\r\n\r\n        // Determine dropdown items based on selected index\r\n        val dropdownItems = when (selectedItemIndex) {\r\n            0 -> listFont\r\n\r\n\r\n            1 -> listOf(\r\n                BottomMenuContent(\"Image\", R.drawable.baseline_image_search_24),\r\n                BottomMenuContent(\"Link\", R.drawable.baseline_link_24),\r\n                BottomMenuContent(\"File\", R.drawable.baseline_attach_file_24),\r\n                BottomMenuContent(\"Background Color\", R.drawable.baseline_format_color_fill_24),\r\n                BottomMenuContent(\"Background Image\", R.drawable.baseline_image_aspect_ratio_24),\r\n                BottomMenuContent(\"Bar Chart\", R.drawable.baseline_bar_chart_24)\r\n            )\r\n\r\n            3 -> listOf(\r\n                BottomMenuContent(\"Save\", R.drawable.baseline_save_24),\r\n                BottomMenuContent(\"Open\", R.drawable.baseline_link_24),\r\n            )\r\n\r\n            5 -> listOf(BottomMenuContent(\"Color Picker\", R.drawable.baseline_format_color_text_24))\r\n\r\n            else -> emptyList()\r\n        }\r\n\r\n\r\n\r\n        dropdownItems?.forEach { item ->\r\n            DropdownMenuItem(\r\n                onClick = {\r\n                    expanded = false\r\n                    Log.i(\"DesignActivity\", \"Dropdown item ${item.title} clicked\")\r\n                    //   changeEditorScreenProperties(selectedItemIndex,item.title,selectedColor,selectedFont)\r\n                    if (selectedItemIndex == 0) {\r\n                        Log.i(\"DesignActivity\", \"onfontchange\")\r\n                        onFontChange(item.title)\r\n                    }\r\n\r\n                    if (item.title.contains(\"Color Picker\")) {\r\n                        onShowColorPicker(true)\r\n                        onColorPickerFor(0)\r\n                    } else if (item.title.equals(\"Image\")) {\r\n                        imagePickerLauncher.launch(\"image/*\")\r\n                    } else if (item.title.equals(\"Background Image\")) {\r\n                        onShowBackImageDialog(true)\r\n                    } else if (item.title.equals(\"File\")) {\r\n                        filePickerLauncher.launch(arrayOf(\"audio/*\", \"video/*\"))\r\n                    } else if (item.title.equals(\"Save\")) {\r\n                        /*val uri = sampleBitmap?.let {\r\n                           saveImageToGallery(context,\r\n                               it, \"sample_image\")\r\n                       }*/\r\n\r\n\r\n                        val editorContent = EditorContent(\r\n                            texts = contents.filterIsInstance<Content.Text>().map {\r\n                                val sampleBitmap = selectedImageURI?.let { getBitmapFromUri(context, it) }\r\n                                val uri= sampleBitmap?.let { bitmapToBase64(it) }\r\n                                TextContent(\r\n                                    text = it.text,\r\n                                    color = selectedFontcolor,\r\n                                    fontSize = selectedFontSize,\r\n                                    isBold = isBold,\r\n                                    isItalic = isItalic,\r\n                                    fontFamily = selectedFontFamily,\r\n                                    selectedImageURL = selectedImageURL,\r\n                                    selectedImageURI = uri.toString(),\r\n                                    isUnderline=isUnderline\r\n                                )\r\n                            },\r\n                            images = contents.filterIsInstance<Content.Image>().map {\r\n                                val sampleBitmap = it.uri?.let { getBitmapFromUri(context, it) }\r\n                                val uri= sampleBitmap?.let { bitmapToBase64(it) }\r\n                                ImageContent(uri = uri.toString())\r\n                            },\r\n                            audios = contents.filterIsInstance<Content.Audio>().map {\r\n                                ImageContent(uri = it.uri.toString())\r\n                            },\r\n                            videos = contents.filterIsInstance<Content.Video>().map {\r\n                                ImageContent(uri = it.uri.toString())\r\n                            },\r\n                            chartData = barChartData?.let {\r\n                                BarChartData(it.labels, it.dataPoints)\r\n                            }\r\n                        )\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        val serializedData = serializeEditorContent(editorContent)\r\n\r\n                        Log.i(\"DesignActivity\", \"save $serializedData\")\r\n\r\n                        saveToSharedPreferences(context = context, \"editorContent\", serializedData)\r\n\r\n                    } else if (item.title.equals(\"Open\")) {\r\n                        val jsonData = loadFromSharedPreferences(context, \"editorContent\")\r\n                        jsonData?.let {\r\n                            val editorContent = deserializeEditorContent(it)\r\n\r\n                            editorContent?.let {\r\n                                for(imageitem in it.images){\r\n                                    onImageChange(Uri.parse(imageitem.uri))\r\n                                }\r\n\r\n                                for (videoitem in it.videos){\r\n                                    onVideoChange(Uri.parse(videoitem.uri))\r\n                                }\r\n\r\n\r\n                                for (audioitem in it.audios){\r\n                                    onAudioChange(Uri.parse(audioitem.uri))\r\n                                }\r\n\r\n\r\n\r\n\r\n                                onTextChange(\r\n                                    it.texts.get(0).text\r\n                                )\r\n                                //  imagePickerLauncher.launch(\"image/*\")\r\n                                onFontSizeChange(it.texts.get(0).fontSize)\r\n                                onBoldChange(it.texts.get(0).isBold)\r\n                                onItalicChange(it.texts.get(0).isItalic)\r\n                                onFontChange(it.texts.get(0).fontFamily)\r\n                                onUnderLineChange(it.texts.get(0).isUnderline)\r\n                                onFontColorChange(it.texts.get(0).color)\r\n                                onImageSelectURL(it.texts.get(0).selectedImageURL)\r\n                                onImageSelectedURI(Uri.parse(it.texts.get(0).selectedImageURI))\r\n\r\n                                if (it.texts.get(0).selectedImageURI != null) {\r\n                                    onSetBgImage(true)\r\n                                }\r\n\r\n\r\n                                it.chartData?.let { it1 -> onBarChartDataChange(it1) }\r\n                                showDialog = false\r\n\r\n                               /* Log.i(\r\n                                    \"DesignActivity\",\r\n                                    \"editorContent $editorContent ${contents.size}\"\r\n                                )*/\r\n\r\n                                // Set other properties like barChartData, etc.\r\n                            }\r\n                        }\r\n                    } else if (item.title.equals(\"Background Color\")) {\r\n                        onShowColorPicker(true)\r\n                        onColorPickerFor(1)\r\n                    } else if (item.title.equals(\"Bar Chart\")) {\r\n                        showDialog = true\r\n                    }\r\n                },\r\n                leadingIcon = {\r\n                    if (selectedItemIndex != 0) {\r\n                        Icon(\r\n                            painter = painterResource(id = item.iconId),\r\n                            contentDescription = item.title,\r\n                            modifier = Modifier.padding(end = 8.dp)\r\n                        )\r\n                    }\r\n                },\r\n                text =\r\n                {\r\n                    if (selectedItemIndex == 0) {\r\n                        Text(\r\n                            item.title, style = TextStyle(\r\n                                fontFamily = when (item.title) {\r\n                                    item.title -> FontFamily(\r\n                                        Font(item.iconId, FontWeight.Normal)\r\n                                    )\r\n\r\n                                    else -> FontFamily.Default\r\n                                }\r\n                            )\r\n                        )\r\n                    } else {\r\n                        Text(\r\n                            item.title, style = TextStyle(\r\n                                fontFamily = FontFamily.Default\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n    if (showDialog) {\r\n        BarChartInputDialog(\r\n            onDismiss = { showDialog = false },\r\n            onConfirm = { labels, dataPoints ->\r\n                onBarChartDataChange(BarChartData(labels, dataPoints))\r\n                showDialog = false\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nval gson = Gson()\r\n\r\nfun serializeEditorContent(editorContent: EditorContent): String {\r\n    return gson.toJson(editorContent)\r\n}\r\n\r\nfun deserializeEditorContent(json: String): EditorContent? {\r\n    return gson.fromJson(json, EditorContent::class.java)\r\n}\r\n\r\n@Composable\r\nfun BarChart(labels: List<String>, dataPoints: List<Float>) {\r\n    Log.d(\"Barchartdata\", \"$labels ---$dataPoints\")\r\n    val maxValue = dataPoints.maxOrNull() ?: 0f\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(16.dp)\r\n            .padding(bottom = 5.dp)\r\n    ) {\r\n        Text(\r\n            \"\",\r\n            fontSize = 18.sp,\r\n            textAlign = TextAlign.Center,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(bottom = 8.dp)\r\n        )\r\n\r\n        Canvas(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(200.dp)\r\n        ) {\r\n            val gap = 2.dp.toPx()\r\n            val totalGapsWidth = gap * (labels.size - 1)\r\n            val barWidth =\r\n                (size.width / labels.size) - 5.dp.toPx() // Subtract 5dp from each bar width for gap\r\n            val maxValueHeight = size.height\r\n\r\n            // Draw Y-axis line\r\n            drawLine(\r\n                color = Color.Black,\r\n                start = Offset(0f, 0f),\r\n                end = Offset(0f, maxValueHeight + 2),\r\n                strokeWidth = 2.dp.toPx()\r\n            )\r\n\r\n            // Draw X-axis line\r\n            drawLine(\r\n                color = Color.Black,\r\n                start = Offset(0f, maxValueHeight),\r\n                end = Offset(size.width, maxValueHeight + 3),\r\n                strokeWidth = 2.dp.toPx()\r\n            )\r\n\r\n            dataPoints.forEachIndexed { index, dataPoint ->\r\n                val barHeight = (dataPoint / maxValue) * maxValueHeight\r\n                drawRect(\r\n                    color = Color.Blue,\r\n                    topLeft = Offset(index * (barWidth + gap), maxValueHeight - barHeight),\r\n                    size = Size(barWidth, barHeight)\r\n                )\r\n\r\n                // Draw text below each bar\r\n                drawIntoCanvas { canvas ->\r\n                    canvas.nativeCanvas.drawText(\r\n                        labels[index],\r\n                        index * (barWidth + gap) + (barWidth / 2), // center text horizontally under the bar\r\n                        maxValueHeight + 16.dp.toPx(), // position text below the bars\r\n                        Paint().apply {\r\n                            textAlign = Paint.Align.CENTER\r\n                            color = android.graphics.Color.BLACK\r\n                            textSize = 14.sp.toPx() // convert sp to px\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun BarChartInputDialog(onDismiss: () -> Unit, onConfirm: (List<String>, List<Float>) -> Unit) {\r\n    var labels by remember { mutableStateOf(\"\") }\r\n    var dataPoints by remember { mutableStateOf(\"\") }\r\n\r\n    AlertDialog(\r\n        onDismissRequest = { onDismiss() },\r\n        title = { Text(text = \"Bar Chart Data\") },\r\n        text = {\r\n            Column {\r\n                OutlinedTextField(\r\n                    value = labels,\r\n                    onValueChange = { labels = it },\r\n                    label = { Text(\"Labels (comma-separated)\") }\r\n                )\r\n                OutlinedTextField(\r\n                    value = dataPoints,\r\n                    onValueChange = { dataPoints = it },\r\n                    label = { Text(\"Data Points (comma-separated)\") }\r\n                )\r\n            }\r\n        },\r\n        confirmButton = {\r\n            Button(\r\n                onClick = {\r\n                    val labelsList = labels.split(\",\").map { it.trim() }\r\n                    val dataPointsList =\r\n                        dataPoints.split(\",\").map { it.trim().toFloatOrNull() ?: 0f }\r\n                    onConfirm(labelsList, dataPointsList)\r\n                }\r\n            ) {\r\n                Text(\"OK\")\r\n            }\r\n        },\r\n        dismissButton = {\r\n            Button(onClick = { onDismiss() }) {\r\n                Text(\"Cancel\")\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n\r\nfun getFontListFromAssets(): HashMap<String, Int> {\r\n    val hashMap = HashMap<String, Int>()\r\n    hashMap.put(\"Bevan\", R.font.bevan)\r\n    hashMap.put(\"Cantataone\", R.font.cantataone_regular)\r\n    hashMap.put(\"CaslonAntique\", R.font.caslonantique)\r\n    hashMap.put(\"Poppins\", R.font.poppins_black)\r\n    hashMap.put(\"Sumana\", R.font.sumana_bold)\r\n    hashMap.put(\"BilloDream\", R.font.billodream)\r\n    hashMap.put(\"GoldyPersonal\", R.font.goldypersonal)\r\n    hashMap.put(\"KakeKake\", R.font.kakekae)\r\n    hashMap.put(\"OrganicPerson\", R.font.organicperson)\r\n\r\n\r\n    return hashMap\r\n}\r\n\r\n// it's basically how menu item should look like\r\n@Composable\r\nfun BottomMenuItemNotepad(\r\n    item: BottomMenuContent,\r\n    isSelected: Boolean = false,\r\n    activeHighlightColor: Color = Color.Green,\r\n    selectedItemIndex: Int,\r\n    activeTextColor: Color = Color.White,\r\n    inactiveTextColor: Color = Color.Blue,\r\n    onItemClick: () -> Unit\r\n) {\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.Center,\r\n        modifier = Modifier.clickable { onItemClick() }) {\r\n// here are some peremetens\r\n        // for how elements will align\r\n        androidx.compose.foundation.layout.Box(\r\n            contentAlignment = Alignment.Center,\r\n            modifier = Modifier\r\n                .clip(RoundedCornerShape(5.dp))\r\n                .background(if (isSelected) activeHighlightColor else Color.Transparent)\r\n                .padding(5.dp)\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(id = item.iconId),\r\n                contentDescription = item.title,\r\n                tint = if (isSelected) activeTextColor else inactiveTextColor,\r\n                modifier = Modifier.size(20.dp)\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n@Composable\r\nfun ImageListAlertDialog(\r\n    shouldShowDialog: Boolean,\r\n    onDismiss: () -> Unit,\r\n    onImageSelectedUrl: (Int) -> Unit,\r\n    pickfromGallery: (Boolean) -> Unit,\r\n    imageList: List<Int>\r\n) {\r\n\r\n    if (shouldShowDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = { /*shouldShowDialog = false*/  },\r\n            title = { Text(text = \"Choose background\") },\r\n            text = {\r\n\r\n                // Display image contents in a LazyVerticalGrid\r\n                LazyVerticalGrid(\r\n                    columns = GridCells.Adaptive(minSize = 100.dp),\r\n                    modifier = Modifier.fillMaxWidth()\r\n                ) {\r\n                    items(imageList) { content ->\r\n                        Image(\r\n                            painter = painterResource(id = content),\r\n                            contentDescription = null,\r\n                            contentScale = ContentScale.FillBounds,\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .height(200.dp)\r\n                                .clickable {\r\n                                    onImageSelectedUrl(content)\r\n                                    //  pickfromGallery(false)\r\n                                    onDismiss()\r\n                                }\r\n                                .padding(bottom = 8.dp)\r\n                        )\r\n                    }\r\n                }\r\n\r\n\r\n            },\r\n            confirmButton = {\r\n                Button(\r\n                    onClick = {\r\n                        onImageSelectedUrl(2)\r\n                        pickfromGallery(false)\r\n                        onDismiss()\r\n                    }\r\n                ) {\r\n                    Text(\"Pick From Gallery\")\r\n                }\r\n            },\r\n            dismissButton = {\r\n                Button(\r\n                    onClick = {\r\n                        onImageSelectedUrl(1)\r\n                        //  pickfromGallery(false)\r\n                        onDismiss()\r\n                    }\r\n                ) {\r\n                    Text(\"Cancel\")\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun ItemCard(item: BottomMenuContent) {\r\n    Row(\r\n        modifier = Modifier\r\n            .padding(8.dp)\r\n            .fillMaxWidth(),\r\n\r\n        ) {\r\n        Text(\r\n            text = item.title,\r\n            modifier = Modifier.padding(16.dp)\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun ItemList(items: List<BottomMenuContent>) {\r\n    Card(\r\n        modifier = Modifier\r\n            .padding(8.dp)\r\n            .fillMaxWidth(),\r\n\r\n        ) {\r\n        LazyColumn {\r\n            items(items) { item ->\r\n                ItemCard(item)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/arsnapchat/DesignActivity.kt b/app/src/main/java/com/example/arsnapchat/DesignActivity.kt
--- a/app/src/main/java/com/example/arsnapchat/DesignActivity.kt	(revision 03a271e350a41542941f745cadec4a9b58622442)
+++ b/app/src/main/java/com/example/arsnapchat/DesignActivity.kt	(date 1719489450394)
@@ -97,6 +97,7 @@
 import androidx.compose.ui.platform.LocalView
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.buildAnnotatedString
 import androidx.compose.ui.text.font.Font
 import androidx.compose.ui.text.font.FontFamily
 import androidx.compose.ui.text.font.FontStyle
@@ -1376,11 +1377,74 @@
                     )
 
                 }
+
+            }
+        }
+    }
+}
+
+
+@Composable
+fun LinkableTextField(
+    text: String,
+    onTextChange: (String) -> Unit,
+    backgroundcolor: Color,
+    selectedFontSize: TextUnit,
+    isBold: Boolean,
+    isItalic: Boolean,
+    isUnderline: Boolean,
+    selectedColor: Color,
+    fontInt: Int?
+) {
+    val annotatedString = buildAnnotatedString {
+        append(text)
+        // Add your link annotation here
+        val start = text.indexOf("link")
+        if (start >= 0) {
+            addStyle(
+                style = SpanStyle(
+                    color = Color.Blue,
+                    textDecoration = TextDecoration.Underline
+                ),
+                start = start,
+                end = start + 4
+            )
+            addStringAnnotation(
+                tag = "URL",
+                annotation = "https://www.yourlink.com",
+                start = start,
+                end = start + 4
+            )
+        }
+    }
+
+    ClickableText(
+        text = annotatedString,
+        onClick = { offset ->
+            annotatedString.getStringAnnotations("URL", offset, offset)
+                .firstOrNull()?.let { annotation ->
+                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(annotation.item))
+                    ContextCompat.startActivity(LocalContext.current, intent, null)
+                }
+        },
+        modifier = Modifier
+            .fillMaxWidth()
+            .fillMaxHeight()
+            .border(0.5.dp, Color.White)
+            .background(backgroundcolor),
+        style = TextStyle(
+            fontSize = selectedFontSize,
+            fontWeight = if (isBold) FontWeight.Bold else FontWeight.Normal,
+            fontStyle = if (isItalic) FontStyle.Italic else FontStyle.Normal,
+            color = selectedColor,
+            textDecoration = if (isUnderline) TextDecoration.Underline else TextDecoration.None,
+            fontFamily = FontFamily(
+                Font(fontInt!!, FontWeight.Normal)
+            )
+        )
+    )
+}
 
-            }
-        }
-    }
-}
 
 fun getBitmapFromUri(context: Context,uri: Uri):Bitmap? {
 
